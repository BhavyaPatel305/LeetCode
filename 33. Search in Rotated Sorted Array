# 1 solution: Bit slower
class Solution:
    def search(self, nums: List[int], target: int) -> int:
        # using binary search
        left = 0
        right = len(nums)-1
        while left <= right:
            mid = left + (right-left)//2
            # If element found, then return index
            if nums[mid] == target:
                return mid
            # if target value in left half
            if nums[left] <= nums[mid]:
                if nums[left] <= target < nums[mid]:
                    right = mid-1
                else:
                    left = mid + 1
            # If target value in right half
            else:
                if nums[mid] < target <= nums[right]:
                    left = mid + 1
                else:
                    right = mid - 1
        return -1




# 2 solution: Faster and eifficient
class Solution:
    def search(self, nums: List[int], target: int) -> int:
        if target not in nums:
            return -1
        return nums.index(target)
